{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createQuantileSeq } from '../../function/statistics/quantileSeq.js';\nimport { lastDimToZeroBase } from './utils/lastDimToZeroBase.js';\nvar name = 'quantileSeq';\nvar dependencies = ['typed', 'add', 'multiply', 'partitionSelect', 'compare', 'isInteger'];\n\n/**\n * Attach a transform function to math.quantileSeq\n * Adds a property transform containing the transform function.\n *\n * This transform changed the `dim` parameter of function std\n * from one-based to zero based\n */\nexport var createQuantileSeqTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    multiply,\n    partitionSelect,\n    compare,\n    isInteger\n  } = _ref;\n  var quantileSeq = createQuantileSeq({\n    typed,\n    add,\n    multiply,\n    partitionSelect,\n    compare,\n    isInteger\n  });\n  return typed('quantileSeq', {\n    'Array|Matrix, number|BigNumber|Array, number': (arr, prob, dim) => quantileSeq(arr, prob, dimToZeroBase(dim)),\n    'Array|Matrix, number|BigNumber|Array, boolean, number': (arr, prob, sorted, dim) => quantileSeq(arr, prob, sorted, dimToZeroBase(dim))\n  });\n  function dimToZeroBase(dim) {\n    // TODO: find a better way, maybe lastDimToZeroBase could apply to more cases.\n    return lastDimToZeroBase([[], dim])[1];\n  }\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"names":["factory","createQuantileSeq","lastDimToZeroBase","name","dependencies","createQuantileSeqTransform","_ref","typed","add","multiply","partitionSelect","compare","isInteger","quantileSeq","Array|Matrix, number|BigNumber|Array, number","arr","prob","dim","dimToZeroBase","Array|Matrix, number|BigNumber|Array, boolean, number","sorted","isTransformFunction"],"sources":["/home/dulphy/WorkSpace/reactjs/calculadora/node_modules/mathjs/lib/esm/expression/transform/quantileSeq.transform.js"],"sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createQuantileSeq } from '../../function/statistics/quantileSeq.js';\nimport { lastDimToZeroBase } from './utils/lastDimToZeroBase.js';\nvar name = 'quantileSeq';\nvar dependencies = ['typed', 'add', 'multiply', 'partitionSelect', 'compare', 'isInteger'];\n\n/**\n * Attach a transform function to math.quantileSeq\n * Adds a property transform containing the transform function.\n *\n * This transform changed the `dim` parameter of function std\n * from one-based to zero based\n */\nexport var createQuantileSeqTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    multiply,\n    partitionSelect,\n    compare,\n    isInteger\n  } = _ref;\n  var quantileSeq = createQuantileSeq({\n    typed,\n    add,\n    multiply,\n    partitionSelect,\n    compare,\n    isInteger\n  });\n  return typed('quantileSeq', {\n    'Array|Matrix, number|BigNumber|Array, number': (arr, prob, dim) => quantileSeq(arr, prob, dimToZeroBase(dim)),\n    'Array|Matrix, number|BigNumber|Array, boolean, number': (arr, prob, sorted, dim) => quantileSeq(arr, prob, sorted, dimToZeroBase(dim))\n  });\n  function dimToZeroBase(dim) {\n    // TODO: find a better way, maybe lastDimToZeroBase could apply to more cases.\n    return lastDimToZeroBase([[], dim])[1];\n  }\n}, {\n  isTransformFunction: true\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,wBAAwB;AAChD,SAASC,iBAAiB,QAAQ,0CAA0C;AAC5E,SAASC,iBAAiB,QAAQ,8BAA8B;AAChE,IAAIC,IAAI,GAAG,aAAa;AACxB,IAAIC,YAAY,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,UAAU,EAAE,iBAAiB,EAAE,SAAS,EAAE,WAAW,CAAC;;AAE1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,0BAA0B,GAAG,eAAeL,OAAO,CAACG,IAAI,EAAEC,YAAY,EAAEE,IAAI,IAAI;EACzF,IAAI;IACFC,KAAK;IACLC,GAAG;IACHC,QAAQ;IACRC,eAAe;IACfC,OAAO;IACPC;EACF,CAAC,GAAGN,IAAI;EACR,IAAIO,WAAW,GAAGZ,iBAAiB,CAAC;IAClCM,KAAK;IACLC,GAAG;IACHC,QAAQ;IACRC,eAAe;IACfC,OAAO;IACPC;EACF,CAAC,CAAC;EACF,OAAOL,KAAK,CAAC,aAAa,EAAE;IAC1B,8CAA8C,EAAEO,CAACC,GAAG,EAAEC,IAAI,EAAEC,GAAG,KAAKJ,WAAW,CAACE,GAAG,EAAEC,IAAI,EAAEE,aAAa,CAACD,GAAG,CAAC,CAAC;IAC9G,uDAAuD,EAAEE,CAACJ,GAAG,EAAEC,IAAI,EAAEI,MAAM,EAAEH,GAAG,KAAKJ,WAAW,CAACE,GAAG,EAAEC,IAAI,EAAEI,MAAM,EAAEF,aAAa,CAACD,GAAG,CAAC;EACxI,CAAC,CAAC;EACF,SAASC,aAAaA,CAACD,GAAG,EAAE;IAC1B;IACA,OAAOf,iBAAiB,CAAC,CAAC,EAAE,EAAEe,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;EACxC;AACF,CAAC,EAAE;EACDI,mBAAmB,EAAE;AACvB,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}